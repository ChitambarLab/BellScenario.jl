var documenterSearchIndex = {"docs":
[{"location":"BellScenario/overview/#Overview-1","page":"Overview","title":"Overview","text":"","category":"section"},{"location":"quantum_nonlocality/#Quantum-Nonlocality-1","page":"Quantum Nonlocality","title":"Quantum Nonlocality","text":"","category":"section"},{"location":"BellScenario/types/#Types-1","page":"Types","title":"Types","text":"","category":"section"},{"location":"bell_comm_scenarios/#Bell-Communication-Scenarios-1","page":"Communication Scenarios","title":"Bell Communication Scenarios","text":"","category":"section"},{"location":"development_manual/#Development-Manual-1","page":"Development Manual","title":"Development Manual","text":"","category":"section"},{"location":"development_manual/#Develop-BellComm.jl-Pkg-1","page":"Development Manual","title":"Develop BellComm.jl Pkg","text":"","category":"section"},{"location":"development_manual/#","page":"Development Manual","title":"Development Manual","text":"This project is packaged using Pkg.jl. For code changes to be reflected in the packaged software, the package must be set to development mode. This is done by running the command:","category":"page"},{"location":"development_manual/#","page":"Development Manual","title":"Development Manual","text":"julia -e 'using Pkg; Pkg.develop(\"BellComm\")'","category":"page"},{"location":"development_manual/#Run-Tests-1","page":"Development Manual","title":"Run Tests","text":"","category":"section"},{"location":"development_manual/#","page":"Development Manual","title":"Development Manual","text":"Run the BellComm.jl package tests (continuous integration):","category":"page"},{"location":"development_manual/#","page":"Development Manual","title":"Development Manual","text":"julia -e 'using Pkg;  Pkg.test(\"BellComm\")'","category":"page"},{"location":"development_manual/#","page":"Development Manual","title":"Development Manual","text":"Download test dependencies into local environment:","category":"page"},{"location":"development_manual/#","page":"Development Manual","title":"Development Manual","text":"julia --project=test/ -e 'using Pkg; Pkg.instantiate()'","category":"page"},{"location":"development_manual/#","page":"Development Manual","title":"Development Manual","text":"Run tests from a dev environment:","category":"page"},{"location":"development_manual/#","page":"Development Manual","title":"Development Manual","text":"julia test/path/to/test_file.jl","category":"page"},{"location":"development_manual/#Build-Docs-1","page":"Development Manual","title":"Build Docs","text":"","category":"section"},{"location":"development_manual/#","page":"Development Manual","title":"Development Manual","text":"Deploy docs server on local machine:","category":"page"},{"location":"development_manual/#","page":"Development Manual","title":"Development Manual","text":"cd docs/build/; python3 -m http.server --bind localhost","category":"page"},{"location":"development_manual/#","page":"Development Manual","title":"Development Manual","text":"Build docs from BellComm.jl source (continuous integration):","category":"page"},{"location":"development_manual/#","page":"Development Manual","title":"Development Manual","text":"Download docs dependencies into local environment:\n julia --project=docs/ -e 'using Pkg; Pkg.develop(PackageSpec(path=pwd())); Pkg.instantiate()'","category":"page"},{"location":"development_manual/#","page":"Development Manual","title":"Development Manual","text":"Build docs:\n julia --project=docs/ docs/make.jl","category":"page"},{"location":"development_manual/#","page":"Development Manual","title":"Development Manual","text":"Build docs from a dev environment:","category":"page"},{"location":"development_manual/#","page":"Development Manual","title":"Development Manual","text":"julia -e 'using Pkg; Pkg.add(\"Documenter\")'","category":"page"},{"location":"development_manual/#","page":"Development Manual","title":"Development Manual","text":"julia docs/make.jl","category":"page"},{"location":"local_bounds/#Local-Bounds-1","page":"Local Bounds","title":"Local Bounds","text":"","category":"section"},{"location":"user_guide/#User-Guide-1","page":"User Guide","title":"User Guide","text":"","category":"section"},{"location":"#BellComm.jl-1","page":"Home","title":"BellComm.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Compute Bell inequalities and their quantum violations.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"BellComm.jl performs two tasks:","category":"page"},{"location":"#","page":"Home","title":"Home","text":"Computes the local polytope for classical bipartite Bell Scenarios enhanced with classical communication.\nOptimizes quantum states and measurements to find maximal quantum violations of the local bounds.","category":"page"}]
}
